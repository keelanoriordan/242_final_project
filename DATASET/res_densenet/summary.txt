Training Dataset: /Users/keelanoriordan/Desktop/GitHub_MacPro.nosync/242-Final-Project/DATASET/nuc/single_rater.pkl
Model Hyperparameters: Optimizer = adam, Learning Rate4 = 0.0001, Batch Size = 128, epoch = 1000, l2 norm = 1e-05
==========================================================================================
Layer (type:depth-idx)                   Output Shape              Param #
==========================================================================================
├─Sequential: 1-1                        [-1, 1016, 1, 1]          --
|    └─Conv2d: 2-1                       [-1, 3, 40, 40]           444
|    └─BatchNorm2d: 2-2                  [-1, 3, 40, 40]           6
|    └─ReLU: 2-3                         [-1, 3, 40, 40]           --
|    └─MaxPool2d: 2-4                    [-1, 3, 20, 20]           --
|    └─DenseBlock: 2-5                   [-1, 195, 20, 20]         --
|    └─TransitionBlock: 2-6              [-1, 97, 10, 10]          --
|    |    └─Conv2d: 3-1                  [-1, 97, 20, 20]          19,012
|    |    └─AvgPool2d: 3-2               [-1, 97, 10, 10]          --
|    └─DenseBlock: 2-7                   [-1, 481, 10, 10]         --
|    └─TransitionBlock: 2-8              [-1, 240, 5, 5]           --
|    |    └─Conv2d: 3-3                  [-1, 240, 10, 10]         115,680
|    |    └─AvgPool2d: 3-4               [-1, 240, 5, 5]           --
|    └─DenseBlock: 2-9                   [-1, 1008, 5, 5]          --
|    └─TransitionBlock: 2-10             [-1, 504, 2, 2]           --
|    |    └─Conv2d: 3-5                  [-1, 504, 5, 5]           508,536
|    |    └─AvgPool2d: 3-6               [-1, 504, 2, 2]           --
|    └─DenseBlock: 2-11                  [-1, 1016, 2, 2]          --
|    └─BatchNorm2d: 2-12                 [-1, 1016, 2, 2]          2,032
|    └─ReLU: 2-13                        [-1, 1016, 2, 2]          --
|    └─AdaptiveAvgPool2d: 2-14           [-1, 1016, 1, 1]          --
├─Linear: 1-2                            [-1, 3]                   3,051
==========================================================================================
Total params: 648,761
Trainable params: 648,761
Non-trainable params: 0
Total mult-adds (M): 60.05
==========================================================================================
Input size (MB): 0.07
Forward/backward pass size (MB): 0.68
Params size (MB): 2.47
Estimated Total Size (MB): 3.23
==========================================================================================

class DenseNet(nn.Module):
    def __init__(self, num_classes=4):
        super(DenseNet, self).__init__()
        self.densenet = models.densenet121(pretrained=False)

        num_features = self.densenet.classifier.in_features
        self.densenet.classifier = nn.Linear(num_features, num_classes)

    def forward(self, x):   
        x = self.densenet(x)
        return x
    
class DenseBlock(nn.Module):
    def __init__(self, in_channels, growth_rate, num_layers):
        super(DenseBlock, self).__init__()
        self.layers = nn.ModuleList([self._make_layer(in_channels + i * growth_rate, growth_rate) for i in range(num_layers)])

    def _make_layer(self, in_channels, growth_rate):
        return nn.Sequential(
            nn.BatchNorm2d(in_channels),
            nn.ReLU(inplace=True),
            nn.Conv2d(in_channels, growth_rate, kernel_size=3, padding=1),
        )

    def forward(self, x):
        for layer in self.layers:
            out = layer(x)
            x = torch.cat([x, out], 1)
        return x

class TransitionBlock(nn.Module):
    def __init__(self, in_channels, out_channels):
        super(TransitionBlock, self).__init__()
        self.conv = nn.Conv2d(in_channels, out_channels, kernel_size=1)
        self.pool = nn.AvgPool2d(kernel_size=2, stride=2)

    def forward(self, x):
        x = self.conv(x)
        x = self.pool(x)
        return x

class DenseNet(nn.Module):
    def __init__(self, growth_rate=32, block_config=(6, 12, 24, 16), num_init_features=64, num_classes=1000):
        super(DenseNet, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(3, num_init_features, kernel_size=7, stride=2, padding=3),
            nn.BatchNorm2d(num_init_features),
            nn.ReLU(inplace=True),
            nn.MaxPool2d(kernel_size=3, stride=2, padding=1)
        )

        in_channels = num_init_features
        for i, num_layers in enumerate(block_config):
            block = DenseBlock(in_channels, growth_rate, num_layers)
            self.features.add_module(f'denseblock{i + 1}', block)
            in_channels = in_channels + num_layers * growth_rate
            if i != len(block_config) - 1:
                trans = TransitionBlock(in_channels, in_channels // 2)
                self.features.add_module(f'transition{i + 1}', trans)
                in_channels = in_channels // 2

        self.features.add_module('norm5', nn.BatchNorm2d(in_channels))
        self.features.add_module('relu5', nn.ReLU(inplace=True))
        self.features.add_module('avgpool5', nn.AdaptiveAvgPool2d((1, 1)))

        self.classifier = nn.Linear(in_channels, num_classes)

    def forward(self, x):
        features = self.features(x)
        out = torch.flatten(features, 1)
        out = self.classifier(out)
        return out
